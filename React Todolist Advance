import React, { useState } from 'react';

function App() {
  // State for managing tasks
  const [tasks, setTasks] = useState([]);

  // State for managing task filter
  const [filter, setFilter] = useState('all'); // 'all', 'completed', 'pending'

  // State for managing editing task
  const [editingTaskId, setEditingTaskId] = useState(null);
  const [editedTaskText, setEditedTaskText] = useState('');

  // Function to handle adding a new task
  const handleAddTask = (text) => {
    const newTask = { id: tasks.length, text, completed: false };
    setTasks([...tasks, newTask]);
  };

  // Function to handle toggling task completion status
  const handleToggleComplete = (id) => {
    setTasks((prevTasks) =>
      prevTasks.map((task) =>
        task.id === id ? { ...task, completed: !task.completed } : task
      )
    );
  };

  // Function to handle deleting a task
  const handleDeleteTask = (id) => {
    setTasks((prevTasks) => prevTasks.filter((task) => task.id !== id));
  };

  // Function to handle initiating the editing of a task
  const handleEditTask = (id, text) => {
    setEditingTaskId(id);
    setEditedTaskText(text);
  };

  // Function to handle saving an edited task
  const handleSaveTask = (id) => {
    setTasks((prevTasks) =>
      prevTasks.map((task) =>
        task.id === id ? { ...task, text: editedTaskText } : task
      )
    );
    setEditingTaskId(null);
  };

  // Function to filter tasks based on the selected filter
  const filteredTasks = tasks.filter((task) => {
    if (filter === 'all') return true;
    if (filter === 'completed') return task.completed;
    if (filter === 'pending') return !task.completed;
    return true;
  });

  return (
    <div className="todoapp stack-large">
      <h1>TodoMatic</h1>
      
      {/* Form to add new tasks */}
      <form
        onSubmit={(e) => {
          e.preventDefault();
          const input = e.target.elements.text;
          handleAddTask(input.value);
          input.value = '';
        }}
      >
        <h2 className="label-wrapper">
          <label htmlFor="new-todo-input" className="label__lg">
            What needs to be done?
          </label>
        </h2>
        <input
          type="text"
          id="new-todo-input"
          className="input input__lg"
          name="text"
          autoComplete="off"
        />
        <button type="submit" className="btn btn__primary btn__lg">
          Add
        </button>
      </form>
     
      {/* Filter buttons */}
      <div className="filter-buttons">
        <button onClick={() => setFilter('all')}>All</button>
        <button onClick={() => setFilter('completed')}>Completed</button>
        <button onClick={() => setFilter('pending')}>Pending</button>
      </div>

      {/* Display remaining tasks count */}
      <h2 id="list-heading">{filteredTasks.length} tasks remaining</h2>
      
      {/* List of tasks */}
      <ul
        role="list"
        className="todo-list stack-large stack-exception"
        aria-labelledby="list-heading"
      >
        {filteredTasks.map((task) => (
          <li key={task.id} className="todo stack-small">
            <div className="c-cb">
              {/* Task label and completion status */}
              <label className="todo-label" htmlFor={`todo-${task.id}`}>
                {editingTaskId === task.id ? (
                  // Input for editing task
                  <input
                    type="text"
                    value={editedTaskText}
                    onChange={(e) => setEditedTaskText(e.target.value)}
                    onBlur={() => handleSaveTask(task.id)}
                  />
                ) : (
                  // Display task text with completion status
                  <span
                    style={{ textDecoration: task.completed ? 'line-through' : 'none' }}
                  >
                    {task.text}
                  </span>
                )}
                {/* Checkbox for toggling task completion status */}
                <input
                  type="checkbox"
                  checked={task.completed}
                  onChange={() => handleToggleComplete(task.id)}
                />
              </label>
            </div>
            {/* Buttons for editing and deleting tasks */}
            <div className="btn-group">
              <button
                type="button"
                className="btn"
                onClick={() => handleEditTask(task.id, task.text)}
              >
                Edit <span className="visually-hidden">{task.text}</span>
              </button>
              <button
                type="button"
                className="btn btn__danger"
                onClick={() => handleDeleteTask(task.id)}
              >
                Delete <span className="visually-hidden">{task.text}</span>
              </button>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default App;
